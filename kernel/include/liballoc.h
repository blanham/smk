#ifndef _ALLOC_H
#define _ALLOC_H



// If we are told to not define our own size_t, then we
// skip the define.
#ifndef _ALLOC_SKIP_DEFINE

#ifndef _HAVE_SIZE_T
#define _HAVE_SIZE_T
typedef	unsigned int	size_t;
#endif


#ifndef	NULL
#define NULL		0
#endif

#endif

#ifdef __cplusplus
extern "C" {
#endif

 

/** This function is supposed to lock the memory data structures. It
 * could be as simple as disabling interrupts or acquiring a spinlock.
 * It's up to you to decide. 
 *
 * \return 0 if the lock was acquired successfully. Anything else is
 * failure.
 */
extern int liballoc_lock();

/** This function unlocks what was previously locked by the func_lock
 * function.  If it disabled interrupts, it enables interrupts. If it
 * had acquiried a spinlock, it releases the spinlock. etc.
 *
 * \return 0 if the lock was successfully released.
 */
extern int liballoc_unlock();

/** This is the hook into the local system which allocates pages. It
 * accepts an integer parameter which is the number of pages
 * required.  The page size was set up in the liballoc_init function.
 *
 * \return NULL if the pages were not allocated.
 * \return A pointer to the allocated memory.
 */
extern void* liballoc_alloc(int);

/** This frees previously allocated memory. The void* parameter passed
 * to the function is the exact same value returned from a previous
 * func_alloc call.
 *
 * If the memory was not previously allocated using a func_alloc, then
 * this function should NOT RETURN 0. In this case, func_abort will
 * be called if it is defined.
 *
 * \return 0 if the memory was successfully freed.
 */
extern int liballoc_free(void*,int);

/** This function is called whenever a func_free does not return 0. Also,
 * it is called whenever a call to free() is executed with an invalid
 * piece of memory.
 *
 * What I mean is, if you try to free() memory which was not previously
 * allocated with an alloc, realloc or calloc call, then this function
 * will be called *if* it is defined. 
 *
 * The parameter passed will be 0 if the error was generated by the 
 * free() call or it will be 1 if func_free() failed.
 *
 * This function need not return. I would think that the application
 * should be aborted and finished. But that's up to you.
 * 
 * \return 0 if the abort was successfully handled.
 */
extern int liballoc_abort(int);
		

/** frees all memory allocated by the system. */
int liballoc_shutdown();


void     *malloc(size_t);				//< The standard function.
void     *realloc(void *, size_t);		//< The standard function.
void     *calloc(size_t, size_t);		//< The standard function.
void      free(void *);					//< The standard function.


#ifdef __cplusplus
}
#endif

#endif


